#this param set the maximum obstacle range. 
obstacle_range: 2.5 #2.5

#this param helps robot 
#to clear out space in front of it upto 3.0 meters away given a sensor reading
raytrace_range: 3.0 #3.0

#footprint: [[x0, y0], [x1, y1], ... [xn, yn]]
#robot_radius: ir_of_robot
robot_radius:  0.17 # distance a circular robot should be clear of the obstacle

#this param will actuallt inflate the obstacle up to this distance from
#the actual obstacle. This can be taken as a tolerance value of obstacle.
#the cose of map will be same as the actual obstacle up to the inflated value
inflation_radius: 0.09  #0.25
cost_scaling_factor: 2.5 #new #3.0 old

observation_sources: laser_scan_sensor #point_cloud_sensor

# marking - add obstacle information to cost map
# clearing - clear obstacle information to cost map
laser_scan_sensor: {sensor_frame: laser, data_type: LaserScan, topic: /scan, marking: true, clearing: true}

#point_cloud_sensor: {sensor_frame: frame_name, data_type: PointCloud, topic: topic_name, marking: true, clearing: true}

# map_type: costmap #new


#turtlebot3
# obstacle_range: 3.0
# raytrace_range: 3.5

# footprint: [[-0.205, -0.155], [-0.205, 0.155], [0.077, 0.155], [0.077, -0.155]]
# #robot_radius: 0.17

# inflation_radius: 1.0
# cost_scaling_factor: 3.0

# map_type: costmap
# observation_sources: scan
# scan: {sensor_frame: laser, data_type: LaserScan, topic: /scan, marking: true, clearing: true}
